3.5. Corrections mesa communication
=======================================


.. _codemessageclass:

1. Message class
------------------

.. code:: python

	#!/usr/bin/env python3


	class Message:
		"""Message class.
		Class implementing the message object which is exchanged between agents through a message service during communication.

		attr:
			from_agent: the sender of the message (id)
			to_agent: the receiver of the message (id)
			message_performative: the performative of the message
			content: the content of the message
		 """
		def __init__(self, from_agent, to_agent, message_performative, content):
			""" Create a new message.
			"""
			self.__from_agent = from_agent
			self.__to_agent = to_agent
			self.__message_performative = message_performative
			self.__content = content

		def __str__(self):
			""" Return Message as a String.
			"""
			return "From " + str(self.__from_agent) + " to " + str(self.__to_agent) \
				   + " (" + str(self.__message_performative) + ") " + str(self.__content)

		def get_exp(self):
			""" Return the sender of the message.
			"""
			return self.__from_agent

		def get_dest(self):
			""" Return the receiver of the message.
			"""
			return self.__to_agent

		def get_performative(self):
			""" Return the performative of the message.
			"""
			return self.__message_performative

		def get_content(self):
			""" Return the content of the message.
			"""
			return self.__content
			

Return to previous page: :ref:`q1`.


.. _codemessageperformativeclass:

2. Message Performative Class
------------------------------
.. code:: python

	#!/usr/bin/env python3

	from enum import Enum


	class MessagePerformative(Enum):
		"""MessagePerformative enum class.
		Enumeration containing the possible message performative.
		"""
		PROPOSE = 101
		ACCEPT = 102
		COMMIT = 103
		ASK_WHY = 104
		ARGUE = 105
		QUERY_REF = 106
		INFORM_REF = 107

		def __str__(self):
			"""Returns the name of the enum item.
			"""
			return '{0}'.format(self.name)
			
.. image:: img/part5_folders_message.png
    :align: center

Return to previous page: :ref:`q1`.


.. _mailboxclass:

3. Mailbox Class
-----------------

.. code:: python

	#!/usr/bin/env python3


	class Mailbox:
		"""Mailbox class.
		Class implementing the mailbox object which manages messages in communicating agents.

		attr:
			unread_messages: The list of unread messages
			read_messages: The list of read messages
		 """

		def __init__(self):
			""" Create a new Mailbox.
			"""
			self.__unread_messages = []
			self.__read_messages = []

		def receive_messages(self, message):
			""" Receive a message and add it in the unread messages list.
			"""
			self.__unread_messages.append(message)

		def get_new_messages(self):
			""" Return all the messages from unread messages list.
			"""
			unread_messages = self.__unread_messages.copy()
			if len(unread_messages) > 0:
				for messages in unread_messages:
					self.__read_messages.append(messages)

			self.__unread_messages.clear()
			return unread_messages

		def get_messages(self):
			""" Return all the messages from both unread and read messages list.
			"""
			if len(self.__unread_messages) > 0:
				self.get_new_messages()
			return self.__read_messages

		def get_messages_from_performative(self, performative):
			""" Return a list of messages which have the same performative.
			"""
			messages_from_performative = []
			for message in self.__unread_messages + self.__read_messages:
				if message.get_performative() == performative:
					messages_from_performative.append(message)
			return messages_from_performative

		def get_messages_from_exp(self, exp):
			""" Return a list of messages which have the same sender.
			"""
			messages_from_exp = []
			for message in self.__unread_messages + self.__read_messages:
				if message.get_exp() == exp:
					messages_from_exp.append(message)
			return messages_from_exp


Return to previous page: :ref:`q2`.


.. _runtest:

4. Runtest 
--------------

.. code:: python

	#!/usr/bin/env python3
	"""
	Testing all the functionalities of the communication package.
	"""

	from communication.mailbox.Mailbox import Mailbox
	from communication.message.Message import Message
	from communication.message.MessagePerformative import MessagePerformative


	if __name__ == "__main__":
		print("*---- Testing communication package ----")
		print("*")
		print("* 1) Testing Mailbox receive & get methods")

		mailbox = Mailbox()
		m1 = Message("Agent1", "Agent2", MessagePerformative.PROPOSE, "Bonjour")
		m2 = Message("Agent1", "Agent2", MessagePerformative.ACCEPT, "Hello")
		m3 = Message("Agent2", "Agent1", MessagePerformative.ARGUE, "Buenos Dias")

		mailbox.receive_messages(m1)
		mailbox.receive_messages(m2)

		assert(len(mailbox.get_new_messages()) == 2)
		print("*     get_new_messages() => OK")
		assert(len(mailbox.get_messages()) == 2)
		print("*     get_messages() => OK")

		mailbox.receive_messages(m3)
		assert(len(mailbox.get_messages()) == 3)
		assert(len(mailbox.get_messages_from_exp("Agent1")) == 2)
		print("*     get_messages_from_exp() => OK")
		assert(len(mailbox.get_messages_from_performative(MessagePerformative.ACCEPT)) == 1)
		assert(len(mailbox.get_messages_from_performative(MessagePerformative.PROPOSE)) == 1)
		assert(len(mailbox.get_messages_from_performative(MessagePerformative.ARGUE)) == 1)
		print("*     get_messages_from_performative() => OK")


Return to previous page: :ref:`q2`.

.. _communicatingagent:

5. CommunicatingAgent Class
-----------------------------

.. code:: python

	#!/usr/bin/env python3

	from mesa import Agent

	from communication.mailbox.Mailbox import Mailbox
	from communication.message.MessageService import MessageService


	class CommunicatingAgent(Agent):
		"""CommunicatingAgent class.
		Class implementing communicating agent in a generalized manner.

		Not intended to be used on its own, but to inherit its methods to multiple
		other agents.

		attr:
			name: The name of the agent (str)
			mailbox: The mailbox of the agent (Mailbox)
			message_service: The message service used to send and receive message (MessageService)
		"""

		def __init__(self, unique_id, model, name):
			""" Create a new communicating agent.
			"""
			super().__init__(unique_id, model)
			self.__name = name
			self.__mailbox = Mailbox()
			self.__messages_service = MessageService.get_instance()

		def step(self):
			""" The step methods of the agent called by the scheduler at each time tick.
			"""
			super().step()

		def get_name(self):
			""" Return the name of the communicating agent."""
			return self.__name

		def receive_message(self, message):
			""" Receive a message (called by the MessageService object) and store it in the mailbox.
			"""
			self.__mailbox.receive_messages(message)

		def send_message(self, message):
			""" Send message through the MessageService object.
			"""
			self.__messages_service.send_message(message)

		def get_new_messages(self):
			""" Return all the unread messages.
			"""
			return self.__mailbox.get_new_messages()

		def get_messages(self):
			""" Return all the received messages.
			"""
			return self.__mailbox.get_messages()

		def get_messages_from_performative(self, performative):
			""" Return a list of messages which have the same performative.
			"""
			return self.__mailbox.get_messages_from_performative(performative)

		def get_messages_from_exp(self, exp):
			""" Return a list of messages which have the same sender.
			"""
			return self.__mailbox.get_messages_from_exp(exp)


Return to previous page: :ref:`q3`.


.. _test:


6. Tests
----------



1.  Open the *runtests.py* file;

2. The implementation of the ``TestAgent`` class is very simple and only consists of calling the constructor of the inherited class and the ``step()`` method.

.. code:: python

	class TestAgent(CommunicatingAgent):
		""" TestAgent which inherit from CommunicatingAgent to test these functionalities.
		"""
		def __init__(self, unique_id, model, name):
			super().__init__(unique_id, model, name)

		def step(self):
			super().step()

3. The implementation of the ``TestModel`` class is very similar to what you did earlier with others **Mesa** ``Model``. The only difference is the instantiation of the ``MessageService`` and its call in the ``step()`` method.

.. code:: python

	class TestModel(Model):
		""" TestModel which inherit from Model to test CommunicatingAgent and MessageService.
		"""
		def __init__(self):
			self.schedule = RandomActivation(self)
			self.__messages_service = MessageService(self.schedule)
			for i in range(2):
				a = TestAgent(i, self, "Agent" + str(i))
				self.schedule.add(a)
			self.running = True

		def step(self):
			self.__messages_service.dispatch_messages()
			self.schedule.step()

4. In the ``if __name__ == "__main__":``, we test the sending of messages instantly at first and then at each simulation step using ``MessageService.get_instance().set_instant_delivery(False)``. To test the communication between each agent, we retrieve the two agents created by the ``TestModel`` via the scheduler (``agent0 = communicating_model.schedule.agents[0]``) and we make send them messages to each other (``agent0.send_message(Message("Agent0", "Agent1", MessagePerformative.COMMIT, "Bonjour"))``). We use the ``assert()`` function to verify that the exchanges are carried out as expected: ``assert(len(agent1.get_new_messages()) == 1)`` (the number of new messages of agent 1 is equal to 1). We try to cover all implemented functionality in the same way.

.. code:: python

	print("* 2) Testing CommunicatingAgent & MessageService")

    communicating_model = TestModel()

    assert(len(communicating_model.schedule.agents) == 2)
    print("*     get the number of CommunicatingAgent => OK")

    agent0 = communicating_model.schedule.agents[0]
    agent1 = communicating_model.schedule.agents[1]

    assert(agent0.get_name() == "Agent0")
    assert(agent1.get_name() == "Agent1")
    print("*     get_name() => OK")

    agent0.send_message(Message("Agent0", "Agent1", MessagePerformative.COMMIT, "Bonjour"))
    agent1.send_message(Message("Agent1", "Agent0", MessagePerformative.COMMIT, "Bonjour"))
    agent0.send_message(Message("Agent0", "Agent1", MessagePerformative.COMMIT, "Comment ça va ?"))

    assert(len(agent0.get_new_messages()) == 1)
    assert(len(agent1.get_new_messages()) == 2)
    assert(len(agent0.get_messages()) == 1)
    assert(len(agent1.get_messages()) == 2)
    print("*     send_message() & dispatch_message (instant delivery) => OK")

    MessageService.get_instance().set_instant_delivery(False)

    agent0.send_message(Message("Agent0", "Agent1", MessagePerformative.COMMIT, "Bonjour"))
    agent1.send_message(Message("Agent1", "Agent0", MessagePerformative.COMMIT, "Bonjour"))
    agent0.send_message(Message("Agent0", "Agent1", MessagePerformative.COMMIT, "Comment ça va ?"))

    assert(len(agent0.get_messages()) == 1)
    assert(len(agent1.get_messages()) == 2)

    communicating_model.step()

    assert(len(agent0.get_new_messages()) == 1)
    assert(len(agent1.get_new_messages()) == 2)
    assert(len(agent0.get_messages()) == 2)
    assert(len(agent1.get_messages()) == 4)
    print("*     send_message() & dispatch_messages => OK")


Return to previous page: :ref:`q3`.